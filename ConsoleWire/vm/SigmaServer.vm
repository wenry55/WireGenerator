#set ($cols = $table.columns)


// DTO
    [DataContract]
    public class ${table.name}Dto
    {
#foreach ($col in $cols) 
        [DataMember]
        public string $col.columnName;
#end
    }

// Interface.cs

        [OperationContract]
        [WebInvoke(Method = "GET",
            RequestFormat = WebMessageFormat.Json,
            ResponseFormat = WebMessageFormat.Json,
            UriTemplate = "${table.name}/{${table.paramKey}")]
        ${table.name}Dto Get${table.name}(string ${table.paramKey});

        [OperationContract]
        [WebInvoke(Method = "GET",
            RequestFormat = WebMessageFormat.Json,
            ResponseFormat = WebMessageFormat.Json,
            UriTemplate = "${table.name}")]
        List<${table.name}Dto> GetAll${table.name}();

        [OperationContract]
        [WebInvoke(Method = "POST",
            RequestFormat = WebMessageFormat.Json,
            ResponseFormat = WebMessageFormat.Json,
            UriTemplate = "${table.name}")]
        bool Save${table.name}(${table.name}Dto paramDto);

        [OperationContract]
        [WebInvoke(Method = "DELETE",
            RequestFormat = WebMessageFormat.Json,
            ResponseFormat = WebMessageFormat.Json,
            UriTemplate = "${table.name}/{${table.paramKey}")]
        bool Remove${table.name}(string ${table.paramKey});

// Service.cs

        public ${table.name}Dto ${table.functionNameForRead}(string ${table.paramKey})
        {
            string connStr = "Server=REVEAL-DEV;Database=reveal_dev_ovi;User ID=sa;Password=Reveal1!;Trusted_Connection=False;";
            SqlConnection connection = new SqlConnection(connStr);
            connection.Open();
            SqlCommand comm = new SqlCommand("select * from ${table.name} where ${table.paramKey} = @${table.paramKey}", connection);
            try
            {
                comm.Parameters.AddWithValue("@${table.key}", int.Parse(${table.paramKey}));
                SqlDataReader reader = comm.ExecuteReader();
                ${table.name}Dto obj = new ${table.name}Dto();
                if (reader.Read())
                {
#foreach ($col in $cols) 
                    obj.$col.columnName = reader["$col.columnName"].ToString();
#end
                }

                comm.Dispose();
                comm = null;
                return obj;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }
            finally
            {
                connection.Close();
            }
        }

        public List<${table.name}Dto> ${table.functionNameForList}()
        {
            string connStr = "Server=REVEAL-DEV;Database=reveal_dev_ovi;User ID=sa;Password=Reveal1!;Trusted_Connection=False;";
            SqlConnection connection = new SqlConnection(connStr);
            connection.Open();
            SqlCommand comm = new SqlCommand("select * from ${table.name}", connection);
            try
            {
                SqlDataReader reader = comm.ExecuteReader();
                List<${table.name}Dto> result = new List<${table.name}Dto>();
                while (reader.Read())
                {
                    ${table.name}Dto obj = new ${table.name}Dto();
#foreach ($col in $cols) 
                    obj.$col.columnName = reader["$col.columnName"].ToString();
#end
                    result.Add(obj);
                }

                comm.Dispose();
                comm = null;
                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }
            finally
            {
                connection.Close();
            }
        }

        public bool ${table.functionNameForSave}(${table.name}Dto paramDto)
        {
            string connStr = "Server=REVEAL-DEV;Database=reveal_dev_ovi;User ID=sa;Password=Reveal1!;Trusted_Connection=False;";
            SqlConnection connection = new SqlConnection(connStr);
            connection.Open();
            SqlCommand comm = new SqlCommand("INSERT INTO ${table.name} VALUES (#foreach ($col in $cols)#if ($col.isIdentity != true) #if( $velocityCount > 1 ),#end@$col.columnName#end#end
			)", connection);
            try
            {
#foreach ($col in $cols) 
#if ($col.isIdentity != true) 
                comm.Parameters.AddWithValue("@$col.columnName", paramDto.${col.columnName}.Trim());
#end
#if ($foreach.count > 0) 
aaaa
#end
#end
                comm.ExecuteNonQuery();
                comm.Dispose();
                comm = null;
                return true;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }
            finally
            {
                connection.Close();
            }
        }

        public bool ${table.functionNameForRemove}(string ${table.paramKey})
        {
            string connStr = "Server=REVEAL-DEV;Database=reveal_dev_ovi;User ID=sa;Password=Reveal1!;Trusted_Connection=False;";
            SqlConnection connection = new SqlConnection(connStr);
            connection.Open();
            SqlCommand comm = new SqlCommand("DELETE FROM ${table.name} WHERE ${table.key} = @${table.key}", connection);
            try
            {
                comm.Parameters.AddWithValue("@${table.key}", ${table.paramKey}.Trim());
                comm.ExecuteNonQuery();
                comm.Dispose();
                comm = null;
                return true;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.ToString(), ex);
            }
            finally
            {
                connection.Close();
            }
        }

